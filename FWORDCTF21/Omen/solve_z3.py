
from z3 import *

inp = [BitVec(f'flag_{i}', 8) for i in range(100)]
s = Solver()

for i in range(len(inp)):
    s.add(inp[i] > 31, inp[i] < 127)

s.add(inp[0] == 70, inp[1] == 87, inp[2] ==  79, inp[3] ==  82, inp[4] ==  68, inp[5] ==  99, inp[6] ==  116, inp[7] ==  102, inp[8] ==  123)

s.add((inp[33] + (inp[3] ^ (inp[49] ^ inp[78] ^ inp[0])) - inp[49] - inp[26]) == 28)
s.add((inp[44] | (inp[69] ^ (inp[43] + inp[21] + (inp[42] & inp[58] & inp[1])))) == 0xF7)
s.add((inp[26] ^ (inp[45] + (inp[64] ^ inp[13] & inp[2]))) - inp[34] - inp[70] == 0xCA)
s.add((inp[76] & (inp[71] + inp[80] + (inp[82] & (inp[40] | (inp[3] - inp[41]))))) == 49)
s.add((inp[30] ^ (inp[14] | ((inp[85] ^ inp[20] ^ inp[35] ^ inp[4]) - inp[64]))) == 0xA3)
s.add(inp[70] + inp[55] + (inp[60] ^ (inp[65] + (inp[32] ^ inp[22] ^ inp[5]))) == 94)
s.add((inp[18] ^ (inp[19] ^ inp[62] ^ inp[74])) == 0)
s.add((inp[3] ^ (inp[81] ^ inp[37] ^ inp[48] ^ (inp[38] + (inp[52] ^ inp[7])))) == 0xCF)
s.add((inp[49] | ((inp[82] & inp[26] & (inp[78] ^ inp[8])) - inp[91])) - inp[53] == 0xA0)
s.add(inp[55] + (inp[90] ^ ((inp[63] & (inp[15] ^ inp[9])) - inp[3])) - inp[88] == 0xC7)
s.add((inp[13] | (inp[78] + (inp[84] ^ (inp[72] + (inp[24] ^ (inp[33] | inp[10])))))) == 95)
s.add((inp[5] | (inp[4] & ((inp[78] ^ inp[11]) - inp[71] - inp[41]))) == 99)
s.add((inp[91] ^ (inp[89] & (inp[92] ^ (inp[1] + (inp[71] & inp[12]) - inp[66])))) == 1)
s.add(inp[22] + (inp[32] ^ (inp[21] + inp[38] + (inp[16] ^ inp[13]))) - inp[59] == 13)
s.add((inp[90] | (inp[76] ^ (inp[20] + inp[14] - inp[0]))) - inp[40] - inp[72] == 0xC8)
s.add((inp[76] ^ (inp[76] & (inp[60] + inp[8] + inp[15] - inp[84] - inp[23]))) == 32)
s.add((inp[12] & (inp[90] & (inp[39] ^ inp[82] ^ inp[8] & (inp[5] | inp[16])))) == 32)
s.add((inp[36] ^ (inp[79] | inp[63] | (inp[70] + inp[30] + (inp[43] | inp[17])))) == 57)
s.add((inp[2] ^ (inp[19] | inp[36] ^ (inp[83] | (inp[18] - inp[87])))) - inp[80] == 0xB7)
s.add((inp[64] ^ (inp[6] ^ inp[20] ^ (inp[82] + (inp[10] ^ (inp[19] - inp[63]))))) == 0xAE)
s.add((inp[91] ^ (inp[80] + (inp[13] | inp[39] | inp[71] ^ (inp[57] | inp[20])))) == 0xC9)
s.add((inp[86] ^ (inp[85] ^ inp[86] & (inp[72] ^ (inp[71] + (inp[54] ^ inp[21]))))) == 93)
s.add((inp[57] ^ (inp[19] ^ inp[65] ^ inp[14] ^ (inp[22] - inp[58]))) - inp[38] == 94)
s.add((inp[21] ^ (inp[6] ^ ((inp[26] ^ inp[72] & (inp[73] ^ inp[23])) - inp[1]))) == 0xF4)
s.add((inp[29] & (inp[69] & (inp[36] ^ (inp[52] + (inp[16] & (inp[24] - inp[76])))))) == 4)
s.add((inp[10] | (inp[12] | ((inp[55] & (inp[38] ^ (inp[42] + inp[25]))) - inp[80]))) == 0xFE)
s.add(inp[24] + (inp[47] & ((inp[16] & (inp[20] + (inp[71] & inp[26]))) - inp[47])) == 0x83)
s.add((inp[88] & (inp[20] | inp[91] ^ inp[76] & inp[80] & inp[27])) - inp[13] == 0xF5)
s.add(inp[12] + (inp[4] & (inp[7] ^ (inp[79] | inp[1] & (inp[89] ^ inp[28])))) == 116)
s.add((inp[95] ^ (inp[32] ^ inp[22] ^ (inp[68] + (inp[58] ^ inp[29]) - inp[54]))) == 76)
s.add((inp[69] ^ (inp[59] ^ inp[26] & (inp[40] | inp[44] ^ inp[41] ^ inp[30]))) == 19)
s.add((inp[50] ^ (inp[28] + (inp[16] & inp[24] & inp[31]) - inp[36] - inp[86])) == 0xC0)
s.add((inp[50] ^ (inp[37] ^ inp[69] ^ inp[54] ^ inp[36] ^ (inp[32] - inp[33]))) == 0x9B)
s.add((inp[56] ^ (inp[12] & (inp[52] ^ (inp[94] + inp[45] + inp[22] + inp[33])))) == 46)
s.add((inp[19] ^ (inp[89] + (inp[6] ^ inp[34]) - inp[23] - inp[20] - inp[42])) == 107)
s.add((inp[10] | (inp[60] + (inp[33] | inp[72] | (inp[27] + (inp[91] ^ inp[35]))))) == 105)
s.add((inp[94] ^ (inp[3] & (inp[24] ^ inp[24] & inp[19] & (inp[42] ^ inp[36])))) == 42)
s.add((inp[17] ^ (inp[57] | inp[71] | ((inp[7] ^ (inp[88] | inp[37])) - inp[19]))) == 0x8E)
s.add((inp[56] ^ (inp[0] ^ inp[76] & (inp[71] ^ inp[76] ^ (inp[38] - inp[9])))) == 57)
s.add((inp[22] ^ (inp[8] ^ (inp[11] + inp[20] + (inp[4] ^ (inp[57] + inp[39]))))) == 12)
s.add(inp[91] + (inp[77] | (inp[85] + (inp[38] ^ (inp[67] + inp[40])) - inp[78])) == 47)
s.add(inp[84] + (inp[86] ^ (inp[85] ^ inp[51] & (inp[11] ^ (inp[78] | inp[41])))) == 0x92)
s.add((inp[12] ^ (inp[31] ^ (inp[90] + (inp[27] ^ inp[0] ^ inp[42]) - inp[65]))) == 0xE3)
s.add((inp[75] ^ (inp[71] ^ (inp[64] + (inp[63] ^ inp[40] & (inp[2] ^ inp[43]))))) == 33)
s.add((inp[93] ^ (inp[27] ^ (inp[35] | inp[81] ^ (inp[44] - inp[9])))) - inp[76] == 9)
s.add((inp[88] | (inp[61] & inp[85] & (inp[78] ^ inp[71] & (inp[30] | inp[45])))) == 127)
s.add((inp[24] ^ (inp[41] ^ inp[21] ^ inp[76] ^ ((inp[89] & inp[46]) - inp[90]))) == 66)
s.add((inp[86] ^ (inp[28] + (inp[61] ^ inp[36] ^ inp[47]) - inp[18])) - inp[68] == 0xFC)
s.add((inp[95] ^ (inp[24] + (inp[8] | inp[46] ^ inp[61] ^ (inp[23] | inp[48])))) == 0xA7)
s.add(inp[19] + (inp[25] | (inp[95] + (inp[32] ^ inp[67] ^ inp[49]))) - inp[42] == 0xF6)
s.add((inp[67] ^ ((inp[90] ^ inp[85] ^ inp[19] ^ inp[50]) - inp[36] - inp[46])) == 97)
s.add((inp[29] ^ (inp[39] ^ inp[4] & ((inp[60] ^ (inp[59] + inp[51])) - inp[56]))) == 67)
s.add((inp[91] & (inp[36] & (inp[91] + (inp[10] ^ inp[69] ^ (inp[23] + inp[52]))))) == 0)
s.add((inp[88] ^ (inp[28] & (inp[19] ^ inp[45] & (inp[52] + (inp[81] ^ inp[53]))))) == 31)
s.add((inp[62] ^ (inp[57] ^ (inp[27] + (inp[44] | ((inp[82] & inp[54]) - inp[60]))))) == 0xB7)
s.add((inp[69] & (inp[12] ^ (inp[10] + (inp[11] ^ inp[81] ^ inp[55]) - inp[17]))) == 94)
s.add(inp[88] + (inp[51] ^ ((inp[53] ^ inp[19] ^ inp[93] ^ inp[56]) - inp[36])) == 57)
s.add((inp[61] | (inp[69] | inp[16] ^ (inp[13] + (inp[11] ^ inp[18] ^ inp[57])))) == 0xFF)
s.add((inp[89] | (inp[60] ^ inp[39] ^ inp[67] ^ inp[58])) == 122)
s.add(inp[10] + (inp[40] ^ (inp[69] ^ inp[4] & (inp[59] - inp[86] - inp[46]))) == 108)
s.add((inp[40] & (inp[68] | inp[18] ^ ((inp[76] ^ inp[84] ^ inp[60]) - inp[66]))) == 95)
s.add((inp[54] & (inp[53] ^ inp[82] ^ (inp[56] + (inp[81] ^ (inp[61] - inp[87]))))) == 66)
s.add((inp[56] ^ ((inp[67] ^ ((inp[41] ^ inp[62]) - inp[42])) - inp[3])) - inp[44] == 120)
s.add((inp[14] ^ (inp[55] | inp[30] ^ (inp[90] | inp[23] | inp[53] ^ inp[63]))) == 11)
s.add((inp[60] & (inp[59] ^ inp[44] ^ inp[46] ^ (inp[71] | inp[29] & inp[64]))) == 34)
s.add((inp[85] | ((inp[43] ^ inp[58] & inp[88] & inp[65]) - inp[49] - inp[73])) == 0xB5)
s.add(inp[12] + inp[88] + (inp[40] ^ (inp[18] ^ (inp[16] + inp[66] - inp[89]))) == 0xAD)
s.add((inp[59] ^ (inp[90] & ((inp[30] ^ inp[9] ^ inp[3] ^ inp[67]) - inp[48]))) == 127)
s.add((inp[50] & (inp[0] | inp[51] ^ inp[11] ^ inp[36] ^ inp[4] ^ inp[68])) == 86)
s.add((inp[73] ^ (inp[0] ^ ((inp[4] ^ inp[81] ^ inp[55] ^ inp[69]) - inp[19]))) == 0xB3)
s.add((inp[48] ^ (inp[81] ^ inp[12] ^ inp[63] & (inp[15] | inp[37] ^ inp[70]))) == 116)
s.add((inp[51] ^ (inp[57] ^ ((inp[6] ^ inp[77] ^ inp[87] ^ inp[71]) - inp[80]))) == 0x9A)
s.add((inp[12] & (inp[76] ^ inp[57] ^ inp[93] ^ inp[89] & inp[72])) - inp[92] == 6)
s.add((inp[49] ^ (inp[87] + (inp[6] ^ inp[65] ^ inp[94] ^ inp[73]) - inp[56])) == 0xC8)
s.add((inp[10] ^ (inp[35] + (inp[12] | inp[60] ^ inp[74]) - inp[58])) - inp[80] == 72)
s.add((inp[49] ^ (inp[68] ^ (inp[94] + (inp[71] ^ (inp[37] + inp[75] - inp[50]))))) == 0xA0)
s.add((inp[66] ^ ((inp[53] | inp[65] ^ inp[15] & (inp[83] + inp[76])) - inp[15])) == 44)
s.add((inp[18] ^ (inp[91] & (inp[30] ^ inp[8] ^ inp[30] ^ (inp[56] + inp[77])))) == 101)
s.add(inp[45] + (inp[55] ^ (inp[46] ^ ((inp[58] ^ (inp[79] | inp[78])) - inp[46]))) == 0xE0)
s.add((inp[86] ^ (inp[31] ^ inp[94] ^ inp[24] & (inp[23] | inp[93] | inp[79]))) == 4)
s.add((inp[21] & (inp[7] ^ inp[46] ^ inp[63] & (inp[67] | (inp[80] - inp[55])))) == 64)
s.add((inp[1] | (inp[48] ^ inp[53] ^ inp[44] ^ inp[20] ^ inp[30] & inp[81])) == 119)
s.add((inp[25] | (inp[1] + (inp[23] ^ inp[70] ^ inp[82]) - inp[51] - inp[14])) == 119)
s.add((inp[37] ^ (inp[22] ^ (inp[58] | inp[5] | inp[60] ^ (inp[39] | inp[83])))) == 2)
s.add((inp[51] ^ (inp[51] & ((inp[91] | inp[74] ^ (inp[9] | inp[84])) - inp[6]))) == 42)
s.add((inp[81] ^ (inp[2] ^ inp[19] ^ inp[62] & (inp[47] + (inp[71] ^ inp[85])))) == 20)
s.add((inp[72] ^ (inp[33] & (inp[94] ^ inp[58] ^ inp[70] ^ (inp[84] + inp[86])))) == 2)
s.add((inp[44] | (inp[80] & (inp[88] ^ (inp[20] | inp[36] ^ inp[44] & inp[87])))) == 125)
s.add((inp[81] ^ (inp[38] ^ inp[94] ^ inp[25] & (inp[50] ^ (inp[88] - inp[0])))) == 56)
s.add((inp[3] | (inp[84] | inp[93] ^ (inp[11] | inp[66] & (inp[63] ^ inp[89])))) == 115)
s.add((inp[52] & (inp[13] ^ inp[85] & (inp[16] + (inp[95] ^ (inp[67] | inp[90]))))) == 32)
s.add((inp[44] ^ (inp[68] ^ inp[78] ^ (inp[74] + (inp[80] ^ (inp[51] + inp[91]))))) == 78)
s.add((inp[18] ^ (inp[15] ^ (inp[33] | inp[30] & (inp[87] ^ (inp[92] - inp[59]))))) == 104)
s.add((inp[67] & (inp[39] ^ (inp[76] + (inp[58] ^ inp[15] ^ inp[93]) - inp[6]))) == 4)
s.add((inp[65] & (inp[77] & (inp[66] ^ (inp[0] | inp[72] ^ inp[80] ^ inp[94])))) == 116)
s.add((inp[83] ^ (inp[55] | ((inp[7] ^ inp[70] & (inp[8] ^ inp[95])) - inp[28]))) == 0xA0)
s.add(inp[79] == 95)
s.add(inp[47] == 52)
s.add(inp[61] == 117)


print(s.check())
m = s.model()
flag = [chr(int(str(m[inp[i]]))) for i in range(len(m))]
print(''.join(flag))

# Flag : FWORDctf{Wh4t_4b0ut_th1s_w31rd_L0ng_fL4g_th4t_m4k3_n0_s3ns3_but_st1LL_w1LL_g1v3_y0u_s0m3_p01ntz}
